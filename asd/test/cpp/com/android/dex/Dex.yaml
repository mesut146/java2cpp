---
root(Type=CompilationUnit): 
    packageDeclaration(Type=PackageDeclaration): 
        name(Type=Name): 
            identifier: "dex"
            qualifier(Type=Name): 
                identifier: "android"
                qualifier(Type=Name): 
                    identifier: "com"
    comment(Type=BlockComment): 
        content: "\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n "
    imports: 
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "CatchHandler"
                qualifier(Type=Name): 
                    identifier: "Code"
                    qualifier(Type=Name): 
                        identifier: "dex"
                        qualifier(Type=Name): 
                            identifier: "android"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Try"
                qualifier(Type=Name): 
                    identifier: "Code"
                    qualifier(Type=Name): 
                        identifier: "dex"
                        qualifier(Type=Name): 
                            identifier: "android"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MethodHandleType"
                qualifier(Type=Name): 
                    identifier: "MethodHandle"
                    qualifier(Type=Name): 
                        identifier: "dex"
                        qualifier(Type=Name): 
                            identifier: "android"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ByteInput"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "dex"
                        qualifier(Type=Name): 
                            identifier: "android"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ByteOutput"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "dex"
                        qualifier(Type=Name): 
                            identifier: "android"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "FileUtils"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "dex"
                        qualifier(Type=Name): 
                            identifier: "android"
                            qualifier(Type=Name): 
                                identifier: "com"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ByteArrayOutputStream"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "File"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "FileInputStream"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "FileOutputStream"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "IOException"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "InputStream"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "OutputStream"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "UTFDataFormatException"
                qualifier(Type=Name): 
                    identifier: "io"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ByteBuffer"
                qualifier(Type=Name): 
                    identifier: "nio"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ByteOrder"
                qualifier(Type=Name): 
                    identifier: "nio"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "MessageDigest"
                qualifier(Type=Name): 
                    identifier: "security"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "NoSuchAlgorithmException"
                qualifier(Type=Name): 
                    identifier: "security"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "AbstractList"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Collections"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Iterator"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "List"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "NoSuchElementException"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "RandomAccess"
                qualifier(Type=Name): 
                    identifier: "util"
                    qualifier(Type=Name): 
                        identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "Adler32"
                qualifier(Type=Name): 
                    identifier: "zip"
                    qualifier(Type=Name): 
                        identifier: "util"
                        qualifier(Type=Name): 
                            identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ZipEntry"
                qualifier(Type=Name): 
                    identifier: "zip"
                    qualifier(Type=Name): 
                        identifier: "util"
                        qualifier(Type=Name): 
                            identifier: "java"
        - import(Type=ImportDeclaration): 
            isAsterisk: "false"
            isStatic: "false"
            name(Type=Name): 
                identifier: "ZipFile"
                qualifier(Type=Name): 
                    identifier: "zip"
                    qualifier(Type=Name): 
                        identifier: "util"
                        qualifier(Type=Name): 
                            identifier: "java"
    types: 
        - type(Type=ClassOrInterfaceDeclaration): 
            isInterface: "false"
            name(Type=SimpleName): 
                identifier: "Dex"
            comment(Type=JavadocComment): 
                content: "\n * The bytes of a dex file in memory for reading and writing. All int offsets\n * are unsigned.\n "
            members: 
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=IntegerLiteralExpr): 
                                value: "8"
                            name(Type=SimpleName): 
                                identifier: "CHECKSUM_OFFSET"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=IntegerLiteralExpr): 
                                value: "4"
                            name(Type=SimpleName): 
                                identifier: "CHECKSUM_SIZE"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=BinaryExpr): 
                                operator: "PLUS"
                                left(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "CHECKSUM_OFFSET"
                                right(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "CHECKSUM_SIZE"
                            name(Type=SimpleName): 
                                identifier: "SIGNATURE_OFFSET"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=IntegerLiteralExpr): 
                                value: "20"
                            name(Type=SimpleName): 
                                identifier: "SIGNATURE_SIZE"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=FieldDeclaration): 
                    comment(Type=LineComment): 
                        content: " Note: libcore.util.EmptyArray cannot be accessed when this code isn't run on Dalvik."
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ArrayCreationExpr): 
                                elementType(Type=PrimitiveType): 
                                    type: "SHORT"
                                levels: 
                                    - level(Type=ArrayCreationLevel): 
                                        dimension(Type=IntegerLiteralExpr): 
                                            value: "0"
                            name(Type=SimpleName): 
                                identifier: "EMPTY_SHORT_ARRAY"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "SHORT"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            name(Type=SimpleName): 
                                identifier: "data"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ByteBuffer"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "TableOfContents"
                            name(Type=SimpleName): 
                                identifier: "tableOfContents"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TableOfContents"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=IntegerLiteralExpr): 
                                value: "0"
                            name(Type=SimpleName): 
                                identifier: "nextSectionStart"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "StringTable"
                            name(Type=SimpleName): 
                                identifier: "strings"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "StringTable"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "TypeIndexToDescriptorIndexTable"
                            name(Type=SimpleName): 
                                identifier: "typeIds"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TypeIndexToDescriptorIndexTable"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "TypeIndexToDescriptorTable"
                            name(Type=SimpleName): 
                                identifier: "typeNames"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TypeIndexToDescriptorTable"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "ProtoIdTable"
                            name(Type=SimpleName): 
                                identifier: "protoIds"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ProtoIdTable"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "FieldIdTable"
                            name(Type=SimpleName): 
                                identifier: "fieldIds"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "FieldIdTable"
                - member(Type=FieldDeclaration): 
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                    variables: 
                        - variable(Type=VariableDeclarator): 
                            initializer(Type=ObjectCreationExpr): 
                                type(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "MethodIdTable"
                            name(Type=SimpleName): 
                                identifier: "methodIds"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "MethodIdTable"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExplicitConstructorInvocationStmt): 
                                isThis: "true"
                                arguments: 
                                    - argument(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "wrap"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "ByteBuffer"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                    name(Type=SimpleName): 
                        identifier: "Dex"
                    comment(Type=JavadocComment): 
                        content: "\n     * Creates a new dex that reads from {@code data}. It is an error to modify\n     * {@code data} after using it to create a dex buffer.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "data"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "BYTE"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                        scope(Type=ThisExpr): 
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "order"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                        scope(Type=ThisExpr): 
                                    arguments: 
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "LITTLE_ENDIAN"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteOrder"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "readFrom"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "tableOfContents"
                                        scope(Type=ThisExpr): 
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                    name(Type=SimpleName): 
                        identifier: "Dex"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "data"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ByteBuffer"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "wrap"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "ByteBuffer"
                                        arguments: 
                                            - argument(Type=ArrayCreationExpr): 
                                                elementType(Type=PrimitiveType): 
                                                    type: "BYTE"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "byteCount"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "order"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                        scope(Type=ThisExpr): 
                                    arguments: 
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "LITTLE_ENDIAN"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteOrder"
                    name(Type=SimpleName): 
                        identifier: "Dex"
                    comment(Type=JavadocComment): 
                        content: "\n     * Creates a new empty dex of the specified size.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "byteCount"
                            type(Type=PrimitiveType): 
                                type: "INT"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=TryStmt): 
                                finallyBlock(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "close"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "in"
                                tryBlock(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "loadFrom"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "in"
                    name(Type=SimpleName): 
                        identifier: "Dex"
                    comment(Type=JavadocComment): 
                        content: "\n     * Creates a new dex buffer of the dex in {@code in}, and closes {@code in}.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "in"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "InputStream"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=ConstructorDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "hasArchiveSuffix"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "FileUtils"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getName"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "file"
                                elseStmt(Type=IfStmt): 
                                    condition(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "endsWith"
                                        scope(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getName"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "file"
                                        arguments: 
                                            - argument(Type=StringLiteralExpr): 
                                                value: ".dex"
                                    elseStmt(Type=BlockStmt): 
                                        statements: 
                                            - statement(Type=ThrowStmt): 
                                                expression(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "DexException"
                                                    arguments: 
                                                        - argument(Type=BinaryExpr): 
                                                            operator: "PLUS"
                                                            left(Type=StringLiteralExpr): 
                                                                value: "unknown output extension: "
                                                            right(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "file"
                                    thenStmt(Type=BlockStmt): 
                                        statements: 
                                            - statement(Type=TryStmt): 
                                                tryBlock(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ExpressionStmt): 
                                                            expression(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "loadFrom"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "inputStream"
                                                resources: 
                                                    - resource(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=ObjectCreationExpr): 
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "FileInputStream"
                                                                    arguments: 
                                                                        - argument(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "file"
                                                                name(Type=SimpleName): 
                                                                    identifier: "inputStream"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "InputStream"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ZipFile"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "file"
                                                        name(Type=SimpleName): 
                                                            identifier: "zipFile"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "ZipFile"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getEntry"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "zipFile"
                                                            arguments: 
                                                                - argument(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "DEX_IN_JAR_NAME"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "DexFormat"
                                                        name(Type=SimpleName): 
                                                            identifier: "entry"
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "ZipEntry"
                                        - statement(Type=IfStmt): 
                                            condition(Type=BinaryExpr): 
                                                operator: "NOT_EQUALS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "entry"
                                                right(Type=NullLiteralExpr): 
                                            elseStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=ThrowStmt): 
                                                        expression(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "DexException"
                                                            arguments: 
                                                                - argument(Type=BinaryExpr): 
                                                                    operator: "PLUS"
                                                                    left(Type=BinaryExpr): 
                                                                        operator: "PLUS"
                                                                        left(Type=BinaryExpr): 
                                                                            operator: "PLUS"
                                                                            left(Type=StringLiteralExpr): 
                                                                                value: "Expected "
                                                                            right(Type=FieldAccessExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "DEX_IN_JAR_NAME"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "DexFormat"
                                                                        right(Type=StringLiteralExpr): 
                                                                            value: " in "
                                                                    right(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "file"
                                            thenStmt(Type=BlockStmt): 
                                                statements: 
                                                    - statement(Type=TryStmt): 
                                                        tryBlock(Type=BlockStmt): 
                                                            statements: 
                                                                - statement(Type=ExpressionStmt): 
                                                                    expression(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "loadFrom"
                                                                        arguments: 
                                                                            - argument(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "inputStream"
                                                        resources: 
                                                            - resource(Type=VariableDeclarationExpr): 
                                                                variables: 
                                                                    - variable(Type=VariableDeclarator): 
                                                                        initializer(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "getInputStream"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "zipFile"
                                                                            arguments: 
                                                                                - argument(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "entry"
                                                                        name(Type=SimpleName): 
                                                                            identifier: "inputStream"
                                                                        type(Type=ClassOrInterfaceType): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "InputStream"
                                                    - statement(Type=ExpressionStmt): 
                                                        expression(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "close"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "zipFile"
                    name(Type=SimpleName): 
                        identifier: "Dex"
                    comment(Type=JavadocComment): 
                        content: "\n     * Creates a new dex buffer from the dex file {@code file}.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "file"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "File"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "ByteArrayOutputStream"
                                            name(Type=SimpleName): 
                                                identifier: "bytesOut"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteArrayOutputStream"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ArrayCreationExpr): 
                                                elementType(Type=PrimitiveType): 
                                                    type: "BYTE"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=IntegerLiteralExpr): 
                                                            value: "8192"
                                            name(Type=SimpleName): 
                                                identifier: "buffer"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "BYTE"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            name(Type=SimpleName): 
                                                identifier: "count"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=WhileStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "write"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "bytesOut"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                condition(Type=BinaryExpr): 
                                    operator: "NOT_EQUALS"
                                    left(Type=EnclosedExpr): 
                                        inner(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "count"
                                            value(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "read"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "in"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                    right(Type=UnaryExpr): 
                                        operator: "MINUS"
                                        expression(Type=IntegerLiteralExpr): 
                                            value: "1"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                        scope(Type=ThisExpr): 
                                    value(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "wrap"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "ByteBuffer"
                                        arguments: 
                                            - argument(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "toByteArray"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "bytesOut"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "order"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                        scope(Type=ThisExpr): 
                                    arguments: 
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "LITTLE_ENDIAN"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteOrder"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "readFrom"
                                    scope(Type=FieldAccessExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "tableOfContents"
                                        scope(Type=ThisExpr): 
                                    arguments: 
                                        - argument(Type=ThisExpr): 
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "loadFrom"
                    comment(Type=JavadocComment): 
                        content: "\n     * It is the caller's responsibility to close {@code in}.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "in"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "InputStream"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "OR"
                                    left(Type=BinaryExpr): 
                                        operator: "LESS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                        right(Type=IntegerLiteralExpr): 
                                            value: "0"
                                    right(Type=BinaryExpr): 
                                        operator: "GREATER_EQUALS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "index"
                                        right(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "length"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IndexOutOfBoundsException"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=BinaryExpr): 
                                                            operator: "PLUS"
                                                            left(Type=BinaryExpr): 
                                                                operator: "PLUS"
                                                                left(Type=StringLiteralExpr): 
                                                                    value: "index:"
                                                                right(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "index"
                                                            right(Type=StringLiteralExpr): 
                                                                value: ", length="
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "length"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "checkBounds"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "STATIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "index"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "length"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ArrayCreationExpr): 
                                                elementType(Type=PrimitiveType): 
                                                    type: "BYTE"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=IntegerLiteralExpr): 
                                                            value: "8192"
                                            name(Type=SimpleName): 
                                                identifier: "buffer"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "BYTE"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "duplicate"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                                    scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "data"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteBuffer"
                                comment(Type=LineComment): 
                                    content: " positioned ByteBuffers aren't thread safe"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "clear"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                            - statement(Type=WhileStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "min"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Math"
                                                            arguments: 
                                                                - argument(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "length"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "buffer"
                                                                - argument(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "remaining"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "data"
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "write"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "out"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                condition(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "hasRemaining"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "writeTo"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "out"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "OutputStream"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=TryStmt): 
                                tryBlock(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "writeTo"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "out"
                                resources: 
                                    - resource(Type=VariableDeclarationExpr): 
                                        variables: 
                                            - variable(Type=VariableDeclarator): 
                                                initializer(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "FileOutputStream"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "dexOut"
                                                name(Type=SimpleName): 
                                                    identifier: "out"
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "OutputStream"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "writeTo"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "dexOut"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "File"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "tableOfContents"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "TableOfContents"
                    name(Type=SimpleName): 
                        identifier: "getTableOfContents"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "OR"
                                    left(Type=BinaryExpr): 
                                        operator: "LESS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                        right(Type=IntegerLiteralExpr): 
                                            value: "0"
                                    right(Type=BinaryExpr): 
                                        operator: "GREATER_EQUALS"
                                        left(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                        right(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "capacity"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=BinaryExpr): 
                                                            operator: "PLUS"
                                                            left(Type=BinaryExpr): 
                                                                operator: "PLUS"
                                                                left(Type=StringLiteralExpr): 
                                                                    value: "position="
                                                                right(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "position"
                                                            right(Type=StringLiteralExpr): 
                                                                value: " length="
                                                        right(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "capacity"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "data"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "duplicate"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                            name(Type=SimpleName): 
                                                identifier: "sectionData"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteBuffer"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "order"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "sectionData"
                                    arguments: 
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "LITTLE_ENDIAN"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteOrder"
                                comment(Type=LineComment): 
                                    content: " necessary?"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "position"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "sectionData"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "limit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "sectionData"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "capacity"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Section"
                                    arguments: 
                                        - argument(Type=StringLiteralExpr): 
                                            value: "section"
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "sectionData"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Section"
                    name(Type=SimpleName): 
                        identifier: "open"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "position"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "NOT_EQUALS"
                                    left(Type=EnclosedExpr): 
                                        inner(Type=BinaryExpr): 
                                            operator: "BINARY_AND"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "maxByteCount"
                                            right(Type=IntegerLiteralExpr): 
                                                value: "3"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalStateException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "Not four byte aligned!"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=BinaryExpr): 
                                                operator: "PLUS"
                                                left(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "nextSectionStart"
                                                right(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "maxByteCount"
                                            name(Type=SimpleName): 
                                                identifier: "limit"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "duplicate"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                            name(Type=SimpleName): 
                                                identifier: "sectionData"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteBuffer"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "order"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "sectionData"
                                    arguments: 
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "LITTLE_ENDIAN"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteOrder"
                                comment(Type=LineComment): 
                                    content: " necessary?"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "position"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "sectionData"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "nextSectionStart"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "limit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "sectionData"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "limit"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Section"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "name"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "sectionData"
                                            name(Type=SimpleName): 
                                                identifier: "result"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Section"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=AssignExpr): 
                                    operator: "ASSIGN"
                                    target(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "nextSectionStart"
                                    value(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "limit"
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "result"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Section"
                    name(Type=SimpleName): 
                        identifier: "appendSection"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "maxByteCount"
                            type(Type=PrimitiveType): 
                                type: "INT"
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "name"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "capacity"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                    type(Type=PrimitiveType): 
                        type: "INT"
                    name(Type=SimpleName): 
                        identifier: "getLength"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "nextSectionStart"
                    type(Type=PrimitiveType): 
                        type: "INT"
                    name(Type=SimpleName): 
                        identifier: "getNextSectionStart"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "duplicate"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                                    scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "data"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteBuffer"
                                comment(Type=LineComment): 
                                    content: " positioned ByteBuffers aren't thread safe"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ArrayCreationExpr): 
                                                elementType(Type=PrimitiveType): 
                                                    type: "BYTE"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "capacity"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "data"
                                            name(Type=SimpleName): 
                                                identifier: "result"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "BYTE"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "position"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                    arguments: 
                                        - argument(Type=IntegerLiteralExpr): 
                                            value: "0"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "get"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "result"
                    type(Type=ArrayType): 
                        origin: "TYPE"
                        componentType(Type=PrimitiveType): 
                            type: "BYTE"
                    name(Type=SimpleName): 
                        identifier: "getBytes"
                    comment(Type=JavadocComment): 
                        content: "\n     * Returns a copy of the the bytes of this dex.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "strings"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "List"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                    name(Type=SimpleName): 
                        identifier: "strings"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "typeIds"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "List"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Integer"
                    name(Type=SimpleName): 
                        identifier: "typeIds"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "typeNames"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "List"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                    name(Type=SimpleName): 
                        identifier: "typeNames"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "protoIds"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "List"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ProtoId"
                    name(Type=SimpleName): 
                        identifier: "protoIds"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "fieldIds"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "List"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "FieldId"
                    name(Type=SimpleName): 
                        identifier: "fieldIds"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=NameExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "methodIds"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "List"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "MethodId"
                    name(Type=SimpleName): 
                        identifier: "methodIds"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ReturnStmt): 
                                expression(Type=ObjectCreationExpr): 
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "ClassDefIterable"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Iterable"
                        typeArguments: 
                            - typeArgument(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ClassDef"
                    name(Type=SimpleName): 
                        identifier: "classDefs"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "offset"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ReturnStmt): 
                                            expression(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "EMPTY"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "TypeList"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "readTypeList"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "open"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "offset"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "TypeList"
                    name(Type=SimpleName): 
                        identifier: "readTypeList"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "offset"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getClassDataOffset"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "classDef"
                                            name(Type=SimpleName): 
                                                identifier: "offset"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "offset"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "offset == 0"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "readClassData"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "open"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "offset"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "ClassData"
                    name(Type=SimpleName): 
                        identifier: "readClassData"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "classDef"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ClassDef"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "getCodeOffset"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "method"
                                            name(Type=SimpleName): 
                                                identifier: "offset"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=IfStmt): 
                                condition(Type=BinaryExpr): 
                                    operator: "EQUALS"
                                    left(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "offset"
                                    right(Type=IntegerLiteralExpr): 
                                        value: "0"
                                thenStmt(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ThrowStmt): 
                                            expression(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "IllegalArgumentException"
                                                arguments: 
                                                    - argument(Type=StringLiteralExpr): 
                                                        value: "offset == 0"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "readCode"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "open"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "offset"
                    type(Type=ClassOrInterfaceType): 
                        name(Type=SimpleName): 
                            identifier: "Code"
                    name(Type=SimpleName): 
                        identifier: "readCode"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "method"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Method"
                                scope(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "ClassData"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            name(Type=SimpleName): 
                                                identifier: "digest"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MessageDigest"
                            - statement(Type=TryStmt): 
                                tryBlock(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=AssignExpr): 
                                                operator: "ASSIGN"
                                                target(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "digest"
                                                value(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getInstance"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "MessageDigest"
                                                    arguments: 
                                                        - argument(Type=StringLiteralExpr): 
                                                            value: "SHA-1"
                                catchClauses: 
                                    - catchClause(Type=CatchClause): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ThrowStmt): 
                                                    expression(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "AssertionError"
                                        parameter(Type=Parameter): 
                                            isVarArgs: "false"
                                            name(Type=SimpleName): 
                                                identifier: "e"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "NoSuchAlgorithmException"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ArrayCreationExpr): 
                                                elementType(Type=PrimitiveType): 
                                                    type: "BYTE"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=IntegerLiteralExpr): 
                                                            value: "8192"
                                            name(Type=SimpleName): 
                                                identifier: "buffer"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "BYTE"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "duplicate"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                                    scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "data"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteBuffer"
                                comment(Type=LineComment): 
                                    content: " positioned ByteBuffers aren't thread safe"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "limit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "capacity"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "position"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                    arguments: 
                                        - argument(Type=BinaryExpr): 
                                            operator: "PLUS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "SIGNATURE_OFFSET"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "SIGNATURE_SIZE"
                            - statement(Type=WhileStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "min"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Math"
                                                            arguments: 
                                                                - argument(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "length"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "buffer"
                                                                - argument(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "remaining"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "data"
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "update"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "digest"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                condition(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "hasRemaining"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "digest"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "digest"
                    type(Type=ArrayType): 
                        origin: "TYPE"
                        componentType(Type=PrimitiveType): 
                            type: "BYTE"
                    name(Type=SimpleName): 
                        identifier: "computeSignature"
                    comment(Type=JavadocComment): 
                        content: "\n     * Returns the signature of all but the first 32 bytes of this dex. The\n     * first 32 bytes of dex files are not specified to be included in the\n     * signature.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Adler32"
                                            name(Type=SimpleName): 
                                                identifier: "adler32"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Adler32"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=ArrayCreationExpr): 
                                                elementType(Type=PrimitiveType): 
                                                    type: "BYTE"
                                                levels: 
                                                    - level(Type=ArrayCreationLevel): 
                                                        dimension(Type=IntegerLiteralExpr): 
                                                            value: "8192"
                                            name(Type=SimpleName): 
                                                identifier: "buffer"
                                            type(Type=ArrayType): 
                                                origin: "TYPE"
                                                componentType(Type=PrimitiveType): 
                                                    type: "BYTE"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "duplicate"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                                    scope(Type=ThisExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "data"
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ByteBuffer"
                                comment(Type=LineComment): 
                                    content: " positioned ByteBuffers aren't thread safe"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "limit"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "capacity"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "position"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                    arguments: 
                                        - argument(Type=BinaryExpr): 
                                            operator: "PLUS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "CHECKSUM_OFFSET"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "CHECKSUM_SIZE"
                            - statement(Type=WhileStmt): 
                                body(Type=BlockStmt): 
                                    statements: 
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "min"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Math"
                                                            arguments: 
                                                                - argument(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "length"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "buffer"
                                                                - argument(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "remaining"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "data"
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "get"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                        - statement(Type=ExpressionStmt): 
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "update"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "adler32"
                                                arguments: 
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "buffer"
                                                    - argument(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    - argument(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                                condition(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "hasRemaining"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                            - statement(Type=ReturnStmt): 
                                expression(Type=CastExpr): 
                                    expression(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "getValue"
                                        scope(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "adler32"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                    type(Type=PrimitiveType): 
                        type: "INT"
                    name(Type=SimpleName): 
                        identifier: "computeChecksum"
                    comment(Type=JavadocComment): 
                        content: "\n     * Returns the checksum of all but the first 12 bytes of {@code dex}.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "write"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "open"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "SIGNATURE_OFFSET"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "computeSignature"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "writeInt"
                                    scope(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "open"
                                        arguments: 
                                            - argument(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "CHECKSUM_OFFSET"
                                    arguments: 
                                        - argument(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "computeChecksum"
                    type(Type=VoidType): 
                    name(Type=SimpleName): 
                        identifier: "writeHashes"
                    comment(Type=JavadocComment): 
                        content: "\n     * Generates the signature and checksum of the dex file {@code out} and\n     * writes them to the file.\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    thrownExceptions: 
                        - thrownException(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "IOException"
                - member(Type=MethodDeclaration): 
                    body(Type=BlockStmt): 
                        statements: 
                            - statement(Type=ExpressionStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "checkBounds"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "typeIndex"
                                        - argument(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "typeIds"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tableOfContents"
                            - statement(Type=ExpressionStmt): 
                                expression(Type=VariableDeclarationExpr): 
                                    variables: 
                                        - variable(Type=VariableDeclarator): 
                                            initializer(Type=BinaryExpr): 
                                                operator: "PLUS"
                                                left(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "off"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "typeIds"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tableOfContents"
                                                right(Type=EnclosedExpr): 
                                                    inner(Type=BinaryExpr): 
                                                        operator: "MULTIPLY"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "TYPE_ID_ITEM"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "SizeOf"
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "typeIndex"
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                            type(Type=PrimitiveType): 
                                                type: "INT"
                            - statement(Type=ReturnStmt): 
                                expression(Type=MethodCallExpr): 
                                    name(Type=SimpleName): 
                                        identifier: "getInt"
                                    scope(Type=NameExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "data"
                                    arguments: 
                                        - argument(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                    type(Type=PrimitiveType): 
                        type: "INT"
                    name(Type=SimpleName): 
                        identifier: "descriptorIndexFromTypeIndex"
                    comment(Type=JavadocComment): 
                        content: "\n     * Look up a descriptor index from a type index. Cheaper than:\n     * {@code open(tableOfContents.typeIds.off + (index * SizeOf.TYPE_ID_ITEM)).readInt();}\n     "
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                    parameters: 
                        - parameter(Type=Parameter): 
                            isVarArgs: "false"
                            name(Type=SimpleName): 
                                identifier: "typeIndex"
                            type(Type=PrimitiveType): 
                                type: "INT"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "Section"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "ByteInput"
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "ByteOutput"
                    members: 
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "name"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "data"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "ByteBuffer"
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    name(Type=SimpleName): 
                                        identifier: "initialPosition"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=ConstructorDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "name"
                                                scope(Type=ThisExpr): 
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "name"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                                scope(Type=ThisExpr): 
                                            value(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=AssignExpr): 
                                            operator: "ASSIGN"
                                            target(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "initialPosition"
                                                scope(Type=ThisExpr): 
                                            value(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "position"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                            name(Type=SimpleName): 
                                identifier: "Section"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "name"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "data"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "ByteBuffer"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "getPosition"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getInt"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "readInt"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "getShort"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                            type(Type=PrimitiveType): 
                                type: "SHORT"
                            name(Type=SimpleName): 
                                identifier: "readShort"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=BinaryExpr): 
                                            operator: "BINARY_AND"
                                            left(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "readShort"
                                            right(Type=IntegerLiteralExpr): 
                                                value: "0xffff"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "readUnsignedShort"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "get"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                            type(Type=PrimitiveType): 
                                type: "BYTE"
                            name(Type=SimpleName): 
                                identifier: "readByte"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=PrimitiveType): 
                                                            type: "BYTE"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "length"
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "BYTE"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "get"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "BYTE"
                            name(Type=SimpleName): 
                                identifier: "readByteArray"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "length"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "EQUALS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "length"
                                            right(Type=IntegerLiteralExpr): 
                                                value: "0"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ReturnStmt): 
                                                    expression(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "EMPTY_SHORT_ARRAY"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=PrimitiveType): 
                                                            type: "SHORT"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "length"
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "SHORT"
                                    - statement(Type=ForStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "result"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readShort"
                                        compare(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "length"
                                        initialization: 
                                            - initialization(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        update: 
                                            - update(Type=UnaryExpr): 
                                                operator: "POSTFIX_INCREMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "SHORT"
                            name(Type=SimpleName): 
                                identifier: "readShortArray"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "length"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "readUnsignedLeb128"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "Leb128"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "readUleb128"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=BinaryExpr): 
                                            operator: "MINUS"
                                            left(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "readUnsignedLeb128"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "Leb128"
                                                arguments: 
                                                    - argument(Type=ThisExpr): 
                                            right(Type=IntegerLiteralExpr): 
                                                value: "1"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "readUleb128p1"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "readSignedLeb128"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "Leb128"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "readSleb128"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "writeUleb128"
                                            arguments: 
                                                - argument(Type=BinaryExpr): 
                                                    operator: "PLUS"
                                                    left(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                    right(Type=IntegerLiteralExpr): 
                                                        value: "1"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeUleb128p1"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "i"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readShortArray"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "size"
                                                    name(Type=SimpleName): 
                                                        identifier: "types"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "SHORT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "alignToFourBytes"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "TypeList"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "types"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "TypeList"
                            name(Type=SimpleName): 
                                identifier: "readTypeList"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "offset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    name(Type=SimpleName): 
                                                        identifier: "savedPosition"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "limit"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    name(Type=SimpleName): 
                                                        identifier: "savedLimit"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "offset"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "limit"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "capacity"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "data"
                                    - statement(Type=TryStmt): 
                                        finallyBlock(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "savedPosition"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "limit"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "savedLimit"
                                        tryBlock(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readUleb128"
                                                                name(Type=SimpleName): 
                                                                    identifier: "expectedLength"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "decode"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "Mutf8"
                                                                    arguments: 
                                                                        - argument(Type=ThisExpr): 
                                                                        - argument(Type=ArrayCreationExpr): 
                                                                            elementType(Type=PrimitiveType): 
                                                                                type: "CHAR"
                                                                            levels: 
                                                                                - level(Type=ArrayCreationLevel): 
                                                                                    dimension(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "expectedLength"
                                                                name(Type=SimpleName): 
                                                                    identifier: "result"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "String"
                                                - statement(Type=IfStmt): 
                                                    condition(Type=BinaryExpr): 
                                                        operator: "NOT_EQUALS"
                                                        left(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "length"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "result"
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "expectedLength"
                                                    thenStmt(Type=BlockStmt): 
                                                        statements: 
                                                            - statement(Type=ThrowStmt): 
                                                                expression(Type=ObjectCreationExpr): 
                                                                    type(Type=ClassOrInterfaceType): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "DexException"
                                                                    arguments: 
                                                                        - argument(Type=BinaryExpr): 
                                                                            operator: "PLUS"
                                                                            left(Type=BinaryExpr): 
                                                                                operator: "PLUS"
                                                                                left(Type=BinaryExpr): 
                                                                                    operator: "PLUS"
                                                                                    left(Type=StringLiteralExpr): 
                                                                                        value: "Declared length "
                                                                                    right(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "expectedLength"
                                                                                right(Type=StringLiteralExpr): 
                                                                                    value: " doesn't match decoded length of "
                                                                            right(Type=MethodCallExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "length"
                                                                                scope(Type=NameExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "result"
                                                - statement(Type=ReturnStmt): 
                                                    expression(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "result"
                                        catchClauses: 
                                            - catchClause(Type=CatchClause): 
                                                body(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ThrowStmt): 
                                                            expression(Type=ObjectCreationExpr): 
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "DexException"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "e"
                                                parameter(Type=Parameter): 
                                                    isVarArgs: "false"
                                                    name(Type=SimpleName): 
                                                        identifier: "e"
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "UTFDataFormatException"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                            name(Type=SimpleName): 
                                identifier: "readString"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "declaringClassIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "typeIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "nameIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "FieldId"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "declaringClassIndex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "typeIndex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "nameIndex"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "FieldId"
                            name(Type=SimpleName): 
                                identifier: "readFieldId"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "declaringClassIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "protoIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "nameIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodId"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "declaringClassIndex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "protoIndex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "nameIndex"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "MethodId"
                            name(Type=SimpleName): 
                                identifier: "readMethodId"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "shortyIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "returnTypeIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "parametersOffset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ProtoId"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "shortyIndex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "returnTypeIndex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "parametersOffset"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ProtoId"
                            name(Type=SimpleName): 
                                identifier: "readProtoId"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "offset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "CallSiteId"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "offset"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "CallSiteId"
                            name(Type=SimpleName): 
                                identifier: "readCallSiteId"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "fromValue"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "MethodHandleType"
                                                        arguments: 
                                                            - argument(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "methodHandleType"
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "MethodHandleType"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "unused1"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "fieldOrMethodId"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "unused2"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "MethodHandle"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "methodHandleType"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "unused1"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "fieldOrMethodId"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "unused2"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "MethodHandle"
                            name(Type=SimpleName): 
                                identifier: "readMethodHandle"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getPosition"
                                                    name(Type=SimpleName): 
                                                        identifier: "offset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "type"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "accessFlags"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "supertype"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "interfacesOffset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "sourceFileIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "annotationsOffset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "classDataOffset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "staticValuesOffset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ClassDef"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "offset"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "type"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "accessFlags"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "supertype"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "interfacesOffset"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "sourceFileIndex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "annotationsOffset"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "classDataOffset"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "staticValuesOffset"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ClassDef"
                            name(Type=SimpleName): 
                                identifier: "readClassDef"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "registersSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "insSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "outsSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUnsignedShort"
                                                    name(Type=SimpleName): 
                                                        identifier: "triesSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "debugInfoOffset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readInt"
                                                    name(Type=SimpleName): 
                                                        identifier: "instructionsSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readShortArray"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "instructionsSize"
                                                    name(Type=SimpleName): 
                                                        identifier: "instructions"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "SHORT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tries"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Try"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    name(Type=SimpleName): 
                                                        identifier: "catchHandlers"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "CatchHandler"
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "GREATER"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "triesSize"
                                            right(Type=IntegerLiteralExpr): 
                                                value: "0"
                                        elseStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tries"
                                                        value(Type=ArrayCreationExpr): 
                                                            elementType(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Try"
                                                            levels: 
                                                                - level(Type=ArrayCreationLevel): 
                                                                    dimension(Type=IntegerLiteralExpr): 
                                                                        value: "0"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "catchHandlers"
                                                        value(Type=ArrayCreationExpr): 
                                                            elementType(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "CatchHandler"
                                                            levels: 
                                                                - level(Type=ArrayCreationLevel): 
                                                                    dimension(Type=IntegerLiteralExpr): 
                                                                        value: "0"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=IfStmt): 
                                                    condition(Type=BinaryExpr): 
                                                        operator: "EQUALS"
                                                        left(Type=BinaryExpr): 
                                                            operator: "REMAINDER"
                                                            left(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "length"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "instructions"
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "2"
                                                        right(Type=IntegerLiteralExpr): 
                                                            value: "1"
                                                    thenStmt(Type=BlockStmt): 
                                                        statements: 
                                                            - statement(Type=ExpressionStmt): 
                                                                expression(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readShort"
                                                                comment(Type=LineComment): 
                                                                    content: " padding"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "open"
                                                                    arguments: 
                                                                        - argument(Type=MethodCallExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "position"
                                                                            scope(Type=NameExpr): 
                                                                                name(Type=SimpleName): 
                                                                                    identifier: "data"
                                                                name(Type=SimpleName): 
                                                                    identifier: "triesSection"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "Section"
                                                    comment(Type=BlockComment): 
                                                        content: "\n                 * We can't read the tries until we've read the catch handlers.\n                 * Unfortunately they're in the opposite order in the dex file\n                 * so we need to read them out-of-order.\n                 "
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "skip"
                                                        arguments: 
                                                            - argument(Type=BinaryExpr): 
                                                                operator: "MULTIPLY"
                                                                left(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "triesSize"
                                                                right(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "TRY_ITEM"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "SizeOf"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "catchHandlers"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readCatchHandlers"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tries"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readTries"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "triesSection"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "triesSize"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "catchHandlers"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Code"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "registersSize"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "insSize"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "outsSize"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "debugInfoOffset"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "instructions"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tries"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "catchHandlers"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Code"
                            name(Type=SimpleName): 
                                identifier: "readCode"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    name(Type=SimpleName): 
                                                        identifier: "baseOffset"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUleb128"
                                                    name(Type=SimpleName): 
                                                        identifier: "catchHandlersSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "CatchHandler"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "catchHandlersSize"
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "CatchHandler"
                                    - statement(Type=ForStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=BinaryExpr): 
                                                                    operator: "MINUS"
                                                                    left(Type=MethodCallExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "position"
                                                                        scope(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "data"
                                                                    right(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "baseOffset"
                                                                name(Type=SimpleName): 
                                                                    identifier: "offset"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "result"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readCatchHandler"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "offset"
                                        compare(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "catchHandlersSize"
                                        initialization: 
                                            - initialization(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        update: 
                                            - update(Type=UnaryExpr): 
                                                operator: "POSTFIX_INCREMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "CatchHandler"
                            name(Type=SimpleName): 
                                identifier: "readCatchHandlers"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Try"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "triesSize"
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Try"
                                    - statement(Type=ForStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readInt"
                                                                name(Type=SimpleName): 
                                                                    identifier: "startAddress"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readUnsignedShort"
                                                                name(Type=SimpleName): 
                                                                    identifier: "instructionCount"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readUnsignedShort"
                                                                name(Type=SimpleName): 
                                                                    identifier: "handlerOffset"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "findCatchHandlerIndex"
                                                                    arguments: 
                                                                        - argument(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "catchHandlers"
                                                                        - argument(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "handlerOffset"
                                                                name(Type=SimpleName): 
                                                                    identifier: "catchHandlerIndex"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "result"
                                                        value(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Try"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "startAddress"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "instructionCount"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "catchHandlerIndex"
                                        compare(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "triesSize"
                                        initialization: 
                                            - initialization(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        update: 
                                            - update(Type=UnaryExpr): 
                                                operator: "POSTFIX_INCREMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Try"
                            name(Type=SimpleName): 
                                identifier: "readTries"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "triesSize"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "catchHandlers"
                                    type(Type=ArrayType): 
                                        origin: "TYPE"
                                        componentType(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "CatchHandler"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ForStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=ArrayAccessExpr): 
                                                                    index(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "i"
                                                                    name(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "catchHandlers"
                                                                name(Type=SimpleName): 
                                                                    identifier: "catchHandler"
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "CatchHandler"
                                                - statement(Type=IfStmt): 
                                                    condition(Type=BinaryExpr): 
                                                        operator: "EQUALS"
                                                        left(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getOffset"
                                                            scope(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "catchHandler"
                                                        right(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "offset"
                                                    thenStmt(Type=BlockStmt): 
                                                        statements: 
                                                            - statement(Type=ReturnStmt): 
                                                                expression(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "i"
                                        compare(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "length"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "catchHandlers"
                                        initialization: 
                                            - initialization(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        update: 
                                            - update(Type=UnaryExpr): 
                                                operator: "POSTFIX_INCREMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                    - statement(Type=ThrowStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "IllegalArgumentException"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "findCatchHandlerIndex"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "catchHandlers"
                                    type(Type=ArrayType): 
                                        origin: "TYPE"
                                        componentType(Type=ClassOrInterfaceType): 
                                            name(Type=SimpleName): 
                                                identifier: "CatchHandler"
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "offset"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readSleb128"
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "abs"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Math"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "size"
                                                    name(Type=SimpleName): 
                                                        identifier: "handlersCount"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=PrimitiveType): 
                                                            type: "INT"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "handlersCount"
                                                    name(Type=SimpleName): 
                                                        identifier: "typeIndexes"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=PrimitiveType): 
                                                            type: "INT"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "handlersCount"
                                                    name(Type=SimpleName): 
                                                        identifier: "addresses"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "INT"
                                    - statement(Type=ForStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "typeIndexes"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readUleb128"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "addresses"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readUleb128"
                                        compare(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "handlersCount"
                                        initialization: 
                                            - initialization(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        update: 
                                            - update(Type=UnaryExpr): 
                                                operator: "POSTFIX_INCREMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ConditionalExpr): 
                                                        condition(Type=BinaryExpr): 
                                                            operator: "LESS_EQUALS"
                                                            left(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "size"
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                                        elseExpr(Type=UnaryExpr): 
                                                            operator: "MINUS"
                                                            expression(Type=IntegerLiteralExpr): 
                                                                value: "1"
                                                        thenExpr(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readUleb128"
                                                    name(Type=SimpleName): 
                                                        identifier: "catchAllAddress"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "CatchHandler"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "typeIndexes"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "addresses"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "catchAllAddress"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "offset"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "CatchHandler"
                            name(Type=SimpleName): 
                                identifier: "readCatchHandler"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "offset"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUleb128"
                                                    name(Type=SimpleName): 
                                                        identifier: "staticFieldsSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUleb128"
                                                    name(Type=SimpleName): 
                                                        identifier: "instanceFieldsSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUleb128"
                                                    name(Type=SimpleName): 
                                                        identifier: "directMethodsSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readUleb128"
                                                    name(Type=SimpleName): 
                                                        identifier: "virtualMethodsSize"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readFields"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "staticFieldsSize"
                                                    name(Type=SimpleName): 
                                                        identifier: "staticFields"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Field"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readFields"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "instanceFieldsSize"
                                                    name(Type=SimpleName): 
                                                        identifier: "instanceFields"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Field"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readMethods"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "directMethodsSize"
                                                    name(Type=SimpleName): 
                                                        identifier: "directMethods"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Method"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readMethods"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "virtualMethodsSize"
                                                    name(Type=SimpleName): 
                                                        identifier: "virtualMethods"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Method"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "ClassData"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "staticFields"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "instanceFields"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "directMethods"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "virtualMethods"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ClassData"
                            name(Type=SimpleName): 
                                identifier: "readClassData"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Field"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "count"
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Field"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    name(Type=SimpleName): 
                                                        identifier: "fieldIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ForStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "PLUS"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "fieldIndex"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readUleb128"
                                                    comment(Type=LineComment): 
                                                        content: " field index diff"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readUleb128"
                                                                name(Type=SimpleName): 
                                                                    identifier: "accessFlags"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "result"
                                                        value(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Field"
                                                                scope(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "ClassData"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "fieldIndex"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "accessFlags"
                                        compare(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "count"
                                        initialization: 
                                            - initialization(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        update: 
                                            - update(Type=UnaryExpr): 
                                                operator: "POSTFIX_INCREMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Field"
                                    scope(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "ClassData"
                            name(Type=SimpleName): 
                                identifier: "readFields"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "count"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Method"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "count"
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Method"
                                                            scope(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "ClassData"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=IntegerLiteralExpr): 
                                                        value: "0"
                                                    name(Type=SimpleName): 
                                                        identifier: "methodIndex"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ForStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "PLUS"
                                                        target(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "methodIndex"
                                                        value(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "readUleb128"
                                                    comment(Type=LineComment): 
                                                        content: " method index diff"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readUleb128"
                                                                name(Type=SimpleName): 
                                                                    identifier: "accessFlags"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "readUleb128"
                                                                name(Type=SimpleName): 
                                                                    identifier: "codeOff"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=AssignExpr): 
                                                        operator: "ASSIGN"
                                                        target(Type=ArrayAccessExpr): 
                                                            index(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                                            name(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "result"
                                                        value(Type=ObjectCreationExpr): 
                                                            type(Type=ClassOrInterfaceType): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "Method"
                                                                scope(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "ClassData"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "methodIndex"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "accessFlags"
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "codeOff"
                                        compare(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "count"
                                        initialization: 
                                            - initialization(Type=VariableDeclarationExpr): 
                                                variables: 
                                                    - variable(Type=VariableDeclarator): 
                                                        initializer(Type=IntegerLiteralExpr): 
                                                            value: "0"
                                                        name(Type=SimpleName): 
                                                            identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "INT"
                                        update: 
                                            - update(Type=UnaryExpr): 
                                                operator: "POSTFIX_INCREMENT"
                                                expression(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Method"
                                    scope(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "ClassData"
                            name(Type=SimpleName): 
                                identifier: "readMethods"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "count"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    name(Type=SimpleName): 
                                                        identifier: "end"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=ArrayCreationExpr): 
                                                        elementType(Type=PrimitiveType): 
                                                            type: "BYTE"
                                                        levels: 
                                                            - level(Type=ArrayCreationLevel): 
                                                                dimension(Type=BinaryExpr): 
                                                                    operator: "MINUS"
                                                                    left(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "end"
                                                                    right(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "start"
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "BYTE"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "start"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "get"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "result"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "result"
                            type(Type=ArrayType): 
                                origin: "TYPE"
                                componentType(Type=PrimitiveType): 
                                    type: "BYTE"
                            name(Type=SimpleName): 
                                identifier: "getBytesFrom"
                            comment(Type=JavadocComment): 
                                content: "\n         * Returns a byte array containing the bytes from {@code start} to this\n         * section's current position.\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "start"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "readByte"
                                                    name(Type=SimpleName): 
                                                        identifier: "visibility"
                                                    type(Type=PrimitiveType): 
                                                        type: "BYTE"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    name(Type=SimpleName): 
                                                        identifier: "start"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "skipValue"
                                            scope(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "EncodedValueReader"
                                                arguments: 
                                                    - argument(Type=ThisExpr): 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ENCODED_ANNOTATION"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "EncodedValueReader"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "Annotation"
                                            arguments: 
                                                - argument(Type=ThisExpr): 
                                                    typeName(Type=Name): 
                                                        identifier: "Dex"
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "visibility"
                                                - argument(Type=ObjectCreationExpr): 
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "EncodedValue"
                                                    arguments: 
                                                        - argument(Type=MethodCallExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "getBytesFrom"
                                                            arguments: 
                                                                - argument(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "start"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Annotation"
                            name(Type=SimpleName): 
                                identifier: "readAnnotation"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    name(Type=SimpleName): 
                                                        identifier: "start"
                                                    type(Type=PrimitiveType): 
                                                        type: "INT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "skipValue"
                                            scope(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "EncodedValueReader"
                                                arguments: 
                                                    - argument(Type=ThisExpr): 
                                                    - argument(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ENCODED_ARRAY"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "EncodedValueReader"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "EncodedValue"
                                            arguments: 
                                                - argument(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "getBytesFrom"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "start"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "EncodedValue"
                            name(Type=SimpleName): 
                                identifier: "readEncodedArray"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "count"
                                            right(Type=IntegerLiteralExpr): 
                                                value: "0"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ThrowStmt): 
                                                    expression(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "IllegalArgumentException"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=BinaryExpr): 
                                                    operator: "PLUS"
                                                    left(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    right(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "count"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "skip"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "count"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "position"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=BinaryExpr): 
                                                    operator: "BINARY_AND"
                                                    left(Type=EnclosedExpr): 
                                                        inner(Type=BinaryExpr): 
                                                            operator: "PLUS"
                                                            left(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "position"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "data"
                                                            right(Type=IntegerLiteralExpr): 
                                                                value: "3"
                                                    right(Type=UnaryExpr): 
                                                        operator: "BITWISE_COMPLEMENT"
                                                        expression(Type=IntegerLiteralExpr): 
                                                            value: "3"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "alignToFourBytes"
                            comment(Type=JavadocComment): 
                                content: "\n         * Skips bytes until the position is aligned to a multiple of 4.\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=WhileStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "put"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                        arguments: 
                                                            - argument(Type=CastExpr): 
                                                                expression(Type=IntegerLiteralExpr): 
                                                                    value: "0"
                                                                type(Type=PrimitiveType): 
                                                                    type: "BYTE"
                                        condition(Type=BinaryExpr): 
                                            operator: "NOT_EQUALS"
                                            left(Type=EnclosedExpr): 
                                                inner(Type=BinaryExpr): 
                                                    operator: "BINARY_AND"
                                                    left(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    right(Type=IntegerLiteralExpr): 
                                                        value: "3"
                                            right(Type=IntegerLiteralExpr): 
                                                value: "0"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "alignToFourBytesWithZeroFill"
                            comment(Type=JavadocComment): 
                                content: "\n         * Writes 0x00 until the position is aligned to a multiple of 4.\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "NOT_EQUALS"
                                            left(Type=EnclosedExpr): 
                                                inner(Type=BinaryExpr): 
                                                    operator: "BINARY_AND"
                                                    left(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "position"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "data"
                                                    right(Type=IntegerLiteralExpr): 
                                                        value: "3"
                                            right(Type=IntegerLiteralExpr): 
                                                value: "0"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ThrowStmt): 
                                                    expression(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "IllegalStateException"
                                                        arguments: 
                                                            - argument(Type=StringLiteralExpr): 
                                                                value: "Not four byte aligned!"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "assertFourByteAligned"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "put"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                                scope(Type=ThisExpr): 
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "bytes"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "write"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "bytes"
                                    type(Type=ArrayType): 
                                        origin: "TYPE"
                                        componentType(Type=PrimitiveType): 
                                            type: "BYTE"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "put"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=CastExpr): 
                                                    expression(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "b"
                                                    type(Type=PrimitiveType): 
                                                        type: "BYTE"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeByte"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "b"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "putShort"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeShort"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "i"
                                    type(Type=PrimitiveType): 
                                        type: "SHORT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=CastExpr): 
                                                        expression(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "i"
                                                        type(Type=PrimitiveType): 
                                                            type: "SHORT"
                                                    name(Type=SimpleName): 
                                                        identifier: "s"
                                                    type(Type=PrimitiveType): 
                                                        type: "SHORT"
                                    - statement(Type=IfStmt): 
                                        condition(Type=BinaryExpr): 
                                            operator: "NOT_EQUALS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "i"
                                            right(Type=EnclosedExpr): 
                                                inner(Type=BinaryExpr): 
                                                    operator: "BINARY_AND"
                                                    left(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "s"
                                                    right(Type=IntegerLiteralExpr): 
                                                        value: "0xffff"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ThrowStmt): 
                                                    expression(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "IllegalArgumentException"
                                                        arguments: 
                                                            - argument(Type=BinaryExpr): 
                                                                operator: "PLUS"
                                                                left(Type=StringLiteralExpr): 
                                                                    value: "Expected an unsigned short: "
                                                                right(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "i"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "writeShort"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "s"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeUnsignedShort"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "i"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ForEachStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "writeShort"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "s"
                                        iterable(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "shorts"
                                        variable(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    name(Type=SimpleName): 
                                                        identifier: "s"
                                                    type(Type=PrimitiveType): 
                                                        type: "SHORT"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "write"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "shorts"
                                    type(Type=ArrayType): 
                                        origin: "TYPE"
                                        componentType(Type=PrimitiveType): 
                                            type: "SHORT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "putInt"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "data"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "i"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeInt"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "i"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=TryStmt): 
                                        tryBlock(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "writeUnsignedLeb128"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Leb128"
                                                        arguments: 
                                                            - argument(Type=ThisExpr): 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                        catchClauses: 
                                            - catchClause(Type=CatchClause): 
                                                body(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ThrowStmt): 
                                                            expression(Type=ObjectCreationExpr): 
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "DexException"
                                                                arguments: 
                                                                    - argument(Type=BinaryExpr): 
                                                                        operator: "PLUS"
                                                                        left(Type=BinaryExpr): 
                                                                            operator: "PLUS"
                                                                            left(Type=BinaryExpr): 
                                                                                operator: "PLUS"
                                                                                left(Type=StringLiteralExpr): 
                                                                                    value: "Section limit "
                                                                                right(Type=MethodCallExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "limit"
                                                                                    scope(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "data"
                                                                            right(Type=StringLiteralExpr): 
                                                                                value: " exceeded by "
                                                                        right(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "name"
                                                parameter(Type=Parameter): 
                                                    isVarArgs: "false"
                                                    name(Type=SimpleName): 
                                                        identifier: "e"
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ArrayIndexOutOfBoundsException"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeUleb128"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "i"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=TryStmt): 
                                        tryBlock(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "writeSignedLeb128"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "Leb128"
                                                        arguments: 
                                                            - argument(Type=ThisExpr): 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "i"
                                        catchClauses: 
                                            - catchClause(Type=CatchClause): 
                                                body(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ThrowStmt): 
                                                            expression(Type=ObjectCreationExpr): 
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "DexException"
                                                                arguments: 
                                                                    - argument(Type=BinaryExpr): 
                                                                        operator: "PLUS"
                                                                        left(Type=BinaryExpr): 
                                                                            operator: "PLUS"
                                                                            left(Type=BinaryExpr): 
                                                                                operator: "PLUS"
                                                                                left(Type=StringLiteralExpr): 
                                                                                    value: "Section limit "
                                                                                right(Type=MethodCallExpr): 
                                                                                    name(Type=SimpleName): 
                                                                                        identifier: "limit"
                                                                                    scope(Type=NameExpr): 
                                                                                        name(Type=SimpleName): 
                                                                                            identifier: "data"
                                                                            right(Type=StringLiteralExpr): 
                                                                                value: " exceeded by "
                                                                        right(Type=NameExpr): 
                                                                            name(Type=SimpleName): 
                                                                                identifier: "name"
                                                parameter(Type=Parameter): 
                                                    isVarArgs: "false"
                                                    name(Type=SimpleName): 
                                                        identifier: "e"
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "ArrayIndexOutOfBoundsException"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeSleb128"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "i"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=TryStmt): 
                                        tryBlock(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=VariableDeclarationExpr): 
                                                        variables: 
                                                            - variable(Type=VariableDeclarator): 
                                                                initializer(Type=MethodCallExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "length"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "value"
                                                                name(Type=SimpleName): 
                                                                    identifier: "length"
                                                                type(Type=PrimitiveType): 
                                                                    type: "INT"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "writeUleb128"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "length"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "write"
                                                        arguments: 
                                                            - argument(Type=MethodCallExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "encode"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "Mutf8"
                                                                arguments: 
                                                                    - argument(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "value"
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "writeByte"
                                                        arguments: 
                                                            - argument(Type=IntegerLiteralExpr): 
                                                                value: "0"
                                        catchClauses: 
                                            - catchClause(Type=CatchClause): 
                                                body(Type=BlockStmt): 
                                                    statements: 
                                                        - statement(Type=ThrowStmt): 
                                                            expression(Type=ObjectCreationExpr): 
                                                                type(Type=ClassOrInterfaceType): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "AssertionError"
                                                parameter(Type=Parameter): 
                                                    isVarArgs: "false"
                                                    name(Type=SimpleName): 
                                                        identifier: "e"
                                                    type(Type=ClassOrInterfaceType): 
                                                        name(Type=SimpleName): 
                                                            identifier: "UTFDataFormatException"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeStringData"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "value"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "String"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    initializer(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "getTypes"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "typeList"
                                                    name(Type=SimpleName): 
                                                        identifier: "types"
                                                    type(Type=ArrayType): 
                                                        origin: "TYPE"
                                                        componentType(Type=PrimitiveType): 
                                                            type: "SHORT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "writeInt"
                                            arguments: 
                                                - argument(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "length"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "types"
                                    - statement(Type=ForEachStmt): 
                                        body(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ExpressionStmt): 
                                                    expression(Type=MethodCallExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "writeShort"
                                                        arguments: 
                                                            - argument(Type=NameExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "type"
                                        iterable(Type=NameExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "types"
                                        variable(Type=VariableDeclarationExpr): 
                                            variables: 
                                                - variable(Type=VariableDeclarator): 
                                                    name(Type=SimpleName): 
                                                        identifier: "type"
                                                    type(Type=PrimitiveType): 
                                                        type: "SHORT"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "alignToFourBytesWithZeroFill"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "writeTypeList"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "typeList"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "TypeList"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=BinaryExpr): 
                                            operator: "MINUS"
                                            left(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "position"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "data"
                                            right(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "initialPosition"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "used"
                            comment(Type=JavadocComment): 
                                content: "\n         * Returns the number of bytes used by this section.\n         "
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PUBLIC"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "StringTable"
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractList"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "String"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "RandomAccess"
                    members: 
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "checkBounds"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                                - argument(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "stringIds"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tableOfContents"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "readString"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "open"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "off"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "stringIds"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "tableOfContents"
                                                        right(Type=EnclosedExpr): 
                                                            inner(Type=BinaryExpr): 
                                                                operator: "MULTIPLY"
                                                                left(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "index"
                                                                right(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "STRING_ID_ITEM"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "SizeOf"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                            name(Type=SimpleName): 
                                identifier: "get"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "index"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "stringIds"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tableOfContents"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "size"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "TypeIndexToDescriptorIndexTable"
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractList"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "Integer"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "RandomAccess"
                    members: 
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "descriptorIndexFromTypeIndex"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Integer"
                            name(Type=SimpleName): 
                                identifier: "get"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "index"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "typeIds"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tableOfContents"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "size"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "TypeIndexToDescriptorTable"
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractList"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "String"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "RandomAccess"
                    members: 
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "get"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "strings"
                                            arguments: 
                                                - argument(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "descriptorIndexFromTypeIndex"
                                                    arguments: 
                                                        - argument(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "index"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "String"
                            name(Type=SimpleName): 
                                identifier: "get"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "index"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "typeIds"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tableOfContents"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "size"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "ProtoIdTable"
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractList"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "ProtoId"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "RandomAccess"
                    members: 
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "checkBounds"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                                - argument(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "protoIds"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tableOfContents"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "readProtoId"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "open"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "off"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "protoIds"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "tableOfContents"
                                                        right(Type=EnclosedExpr): 
                                                            inner(Type=BinaryExpr): 
                                                                operator: "MULTIPLY"
                                                                left(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "PROTO_ID_ITEM"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "SizeOf"
                                                                right(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "index"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ProtoId"
                            name(Type=SimpleName): 
                                identifier: "get"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "index"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "protoIds"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tableOfContents"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "size"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "FieldIdTable"
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractList"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "FieldId"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "RandomAccess"
                    members: 
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "checkBounds"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                                - argument(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "fieldIds"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tableOfContents"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "readFieldId"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "open"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "off"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "fieldIds"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "tableOfContents"
                                                        right(Type=EnclosedExpr): 
                                                            inner(Type=BinaryExpr): 
                                                                operator: "MULTIPLY"
                                                                left(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "MEMBER_ID_ITEM"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "SizeOf"
                                                                right(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "index"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "FieldId"
                            name(Type=SimpleName): 
                                identifier: "get"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "index"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "fieldIds"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tableOfContents"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "size"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "MethodIdTable"
                    extendedTypes: 
                        - extendedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "AbstractList"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "MethodId"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "RandomAccess"
                    members: 
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "checkBounds"
                                            arguments: 
                                                - argument(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "index"
                                                - argument(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "size"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "methodIds"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tableOfContents"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "readMethodId"
                                            scope(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "open"
                                                arguments: 
                                                    - argument(Type=BinaryExpr): 
                                                        operator: "PLUS"
                                                        left(Type=FieldAccessExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "off"
                                                            scope(Type=FieldAccessExpr): 
                                                                name(Type=SimpleName): 
                                                                    identifier: "methodIds"
                                                                scope(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "tableOfContents"
                                                        right(Type=EnclosedExpr): 
                                                            inner(Type=BinaryExpr): 
                                                                operator: "MULTIPLY"
                                                                left(Type=FieldAccessExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "MEMBER_ID_ITEM"
                                                                    scope(Type=NameExpr): 
                                                                        name(Type=SimpleName): 
                                                                            identifier: "SizeOf"
                                                                right(Type=NameExpr): 
                                                                    name(Type=SimpleName): 
                                                                        identifier: "index"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "MethodId"
                            name(Type=SimpleName): 
                                identifier: "get"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            parameters: 
                                - parameter(Type=Parameter): 
                                    isVarArgs: "false"
                                    name(Type=SimpleName): 
                                        identifier: "index"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=FieldAccessExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "size"
                                            scope(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "methodIds"
                                                scope(Type=NameExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "tableOfContents"
                            type(Type=PrimitiveType): 
                                type: "INT"
                            name(Type=SimpleName): 
                                identifier: "size"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "ClassDefIterator"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "Iterator"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "ClassDef"
                    members: 
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                                - modifier(Type=Modifier): 
                                    keyword: "FINAL"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    initializer(Type=MethodCallExpr): 
                                        name(Type=SimpleName): 
                                            identifier: "open"
                                        arguments: 
                                            - argument(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "off"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "classDefs"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "tableOfContents"
                                    name(Type=SimpleName): 
                                        identifier: "in"
                                    type(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "Section"
                        - member(Type=FieldDeclaration): 
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PRIVATE"
                            variables: 
                                - variable(Type=VariableDeclarator): 
                                    initializer(Type=IntegerLiteralExpr): 
                                        value: "0"
                                    name(Type=SimpleName): 
                                        identifier: "count"
                                    type(Type=PrimitiveType): 
                                        type: "INT"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=BinaryExpr): 
                                            operator: "LESS"
                                            left(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "count"
                                            right(Type=FieldAccessExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "size"
                                                scope(Type=FieldAccessExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "classDefs"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "tableOfContents"
                            type(Type=PrimitiveType): 
                                type: "BOOLEAN"
                            name(Type=SimpleName): 
                                identifier: "hasNext"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=IfStmt): 
                                        condition(Type=UnaryExpr): 
                                            operator: "LOGICAL_COMPLEMENT"
                                            expression(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "hasNext"
                                        thenStmt(Type=BlockStmt): 
                                            statements: 
                                                - statement(Type=ThrowStmt): 
                                                    expression(Type=ObjectCreationExpr): 
                                                        type(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "NoSuchElementException"
                                    - statement(Type=ExpressionStmt): 
                                        expression(Type=UnaryExpr): 
                                            operator: "POSTFIX_INCREMENT"
                                            expression(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "count"
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=MethodCallExpr): 
                                            name(Type=SimpleName): 
                                                identifier: "readClassDef"
                                            scope(Type=NameExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "in"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "ClassDef"
                            name(Type=SimpleName): 
                                identifier: "next"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ThrowStmt): 
                                        expression(Type=ObjectCreationExpr): 
                                            type(Type=ClassOrInterfaceType): 
                                                name(Type=SimpleName): 
                                                    identifier: "UnsupportedOperationException"
                            type(Type=VoidType): 
                            name(Type=SimpleName): 
                                identifier: "remove"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
                - member(Type=ClassOrInterfaceDeclaration): 
                    isInterface: "false"
                    name(Type=SimpleName): 
                        identifier: "ClassDefIterable"
                    implementedTypes: 
                        - implementedType(Type=ClassOrInterfaceType): 
                            name(Type=SimpleName): 
                                identifier: "Iterable"
                            typeArguments: 
                                - typeArgument(Type=ClassOrInterfaceType): 
                                    name(Type=SimpleName): 
                                        identifier: "ClassDef"
                    members: 
                        - member(Type=MethodDeclaration): 
                            body(Type=BlockStmt): 
                                statements: 
                                    - statement(Type=ReturnStmt): 
                                        expression(Type=ConditionalExpr): 
                                            condition(Type=UnaryExpr): 
                                                operator: "LOGICAL_COMPLEMENT"
                                                expression(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "exists"
                                                    scope(Type=FieldAccessExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "classDefs"
                                                        scope(Type=NameExpr): 
                                                            name(Type=SimpleName): 
                                                                identifier: "tableOfContents"
                                            elseExpr(Type=ObjectCreationExpr): 
                                                type(Type=ClassOrInterfaceType): 
                                                    name(Type=SimpleName): 
                                                        identifier: "ClassDefIterator"
                                            thenExpr(Type=MethodCallExpr): 
                                                name(Type=SimpleName): 
                                                    identifier: "iterator"
                                                scope(Type=MethodCallExpr): 
                                                    name(Type=SimpleName): 
                                                        identifier: "emptySet"
                                                    scope(Type=NameExpr): 
                                                        name(Type=SimpleName): 
                                                            identifier: "Collections"
                                                    typeArguments: 
                                                        - typeArgument(Type=ClassOrInterfaceType): 
                                                            name(Type=SimpleName): 
                                                                identifier: "ClassDef"
                            type(Type=ClassOrInterfaceType): 
                                name(Type=SimpleName): 
                                    identifier: "Iterator"
                                typeArguments: 
                                    - typeArgument(Type=ClassOrInterfaceType): 
                                        name(Type=SimpleName): 
                                            identifier: "ClassDef"
                            name(Type=SimpleName): 
                                identifier: "iterator"
                            modifiers: 
                                - modifier(Type=Modifier): 
                                    keyword: "PUBLIC"
                            annotations: 
                                - annotation(Type=MarkerAnnotationExpr): 
                                    name(Type=Name): 
                                        identifier: "Override"
                    modifiers: 
                        - modifier(Type=Modifier): 
                            keyword: "PRIVATE"
                        - modifier(Type=Modifier): 
                            keyword: "FINAL"
            modifiers: 
                - modifier(Type=Modifier): 
                    keyword: "PUBLIC"
                - modifier(Type=Modifier): 
                    keyword: "FINAL"
...