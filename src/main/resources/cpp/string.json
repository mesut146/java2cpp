{
  "name": "java.lang.String",
  "target": "std::string",
  "include": "<string>",
  "methods": [
    {
      "name": "length()",
      "target": "$0.size()"
    },
    {
      "name": "substring(int)",
      "target": "substr($1)"
    },
    {
      "name": "substring(int,int)",
      "target": "substr($1, $2 - $1)"
    },
    {
      "name": "indexOf(java.lang.String)",
      "target": "find($1)"
    },
    {
      "name": "indexOf(java.lang.String,int)",
      "target": "find($1, $2)"
    },
    {
      "name": "indexOf(int)",
      "target": "find($1)"
    },
    {
      "name": "indexOf(int,int)",
      "target": "find($1, $2)"
    },
    {
      "name": "lastIndexOf(java.lang.String)",
      "target": "rfind(*$1)"
    },
    {
      "name": "lastIndexOf(int)",
      "target": "rfind($1)"
    },
    {
      "name": "toCharArray()",
      "target": "data()"
    },
    {
      "name": "hashCode()",
      "target": "std::hash<std::string>($0)"
    },
    {
      "name": "compareTo(java.lang.String)",
      "target": "$0.compare(*$1)"
    },
    {
      "name": "charAt(int)",
      "target": "$0.at($1)"
    },
    {
      "name": "contains(java.lang.String)",
      "target": "($0->find($1) != std::string::npos)",
      "external": true
    },
    {
      "name": "endsWith(java.lang.String)",
      "target": "compare($0.size() - $1.size(), $1.size(), $1)"
    },
    {
      "name": "startsWith(java.lang.String)",
      "target": "$0.compare(0, $1->size(), *$1)"
    },
    {
      "name": "toUpperCase()",
      "target": [
        "std::string *tmp = new std::string();",
        "for(auto &c: *${varName}){",
        "    tmp->append(1, std::toupper(c));",
        "}",
        "tmp"
      ]
    },
    {
      "name": "toUpperCase(java.util.Locale)",
      "target": [
        "std::string *tmp = new std::string();",
        "for(auto &c: *${varName}){",
        "    tmp->append(1, std::toupper(c));",
        "}"
      ],
      "expr": "tmp",
      "warning": "toUpperCase had locale but i didn't use"
    },
    {
      "name": "toLowerCase()",
      "target": [
        "std::string *tmp = new std::string();",
        "for(auto &c: *${varName}){",
        "    tmp->append(1, std::tolower(c));",
        "}"
      ],
      "expr": "tmp"
    },
    {
      "name": "toLowerCase(java.util.Locale)",
      "target": [
        "std::string *tmp = new std::string();",
        "for(auto &c: *${varName}){",
        "    tmp->append(1, std::tolower(c));",
        "}"
      ],
      "expr": "tmp",
      "warning": "toLowerCase had locale but i didn't use"
    },
    {
      "name": "equals(java.lang.Object)",
      "target": "(*${varName} == $1)",
      "external": true
    },
    {
      "name": "format(java.lang.String,java.lang.Object[])",
      "target": "CppHelper::format($1, $2)",
      "external": true
    },
    {
      "name": "getBytes()",
      "target": "data()"
    },
    {
      "name": "getBytes(java.lang.String)",
      "target": "CppHelper::encode(${varName}, $1)",
      "external": true
    },
    {
      "name": "replace(java.lang.CharSequence,java.lang.CharSequence)",
      "target": "CppHelper::replace(${varName}, $1, $2)",
      "external": true
    },
    {
      "name": "replace(char,char)",
      "target": "CppHelper::replace(${varName}, $1, $2)",
      "external": true
    },
    {
      "name": "replaceAll(java.lang.String,java.lang.String)",
      "target": "std::regex_replace(${varName}, std::regex($1), $2)",
      "external": true,
      "include": "<regex>"
    },
    {
      "name": "split(java.lang.String)",
      "target": "CppHelper::split(${varName}, $1)",
      "external": true
    },
    {
      "name": "valueOf(int)",
      "target": "new std::string(std::to_string($1))",
      "external": true
    }
  ]
}
